{"version":3,"sources":["utils.tsx","fee-redeemer.ts","Header.tsx","RedeemButton.tsx","Redeemer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getEmptyAccountInfos","connection","accounts","callback","a","accList","map","acc","i","adr","publicKey","toBase58","account","id","link","getSolscanLink","lamports","populateAll","populateMetadataInfo","address","TOKEN_METADATA_PROGRAM_ID","anchor","PublicKey","getMetadataAccount","mint","findProgramAddress","Buffer","from","toBuffer","accountInfo","metadataAccount","metadata","getNFTName","name","console","log","getAccountInfo","metadataAccountInfo","nameBuffer","data","slice","nameLenght","readUInt32LE","j","readUInt8","String","fromCharCode","undefined","getSelectedPKsToClose","emptyAccountsInfos","selectionModel","filter","eai","includes","RENT_PER_TOKEN_ACCOUNT_IN_SOL","solForEmptyAccounts","emptyAccounts","eA","reduce","prev","curr","sweb3","getPKsToClose","getTotalRedemptions","buffer","closedAccounts","readInt32LE","totalCloses","totalSolRedeemed","findEmptyTokenAccounts","owner","getTokenAccountsByOwner","programId","splToken","response","value","isEmpty","offsetInBytes","readBigUInt64LE","amount","pubkey","push","createCloseEmptyAccountsTransactions","accountPKs","cntAccount","program","donationPercentage","donationAddress","closeInstructions","accPK","createCloseAccountInstruction","transactions","length","transaction","nextInstr","pop","add","closeInstrCnt","instructions","donationAmount","donationInstruction","transfer","fromPubkey","toPubkey","cntInstruction","instruction","count","feecntrAccount","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","Header","txcnt","totalRedemptions","Math","ceil","Grid","container","direction","justifyContent","wrap","Typography","variant","color","style","fontWeight","getPriceString","price","toFixed","CTAButton","styled","Button","RedeemButton","onClick","useState","clicked","setClicked","disabled","CircularProgress","ConnectButton","WalletDialogButton","MainContainer","div","emptyAccountsColumns","field","headerName","width","renderCell","cellValues","row","Link","href","target","Redeemer","props","setEmptyAccounts","setTotalRedemptions","emptyAccountInfos","setEmptyAccountInfos","showTable","setShowTable","open","message","severity","alertState","setAlertState","setSelectionModel","wallet","useWallet","anchorWallet","signAllTransactions","signTransaction","provider","preflightCommitment","idl","require","frcntrProgramId","enableTable","updateStateCallback","eaInfos","allIDs","ea","useEffect","updatedEA","frcntrAccount","totalInfo","onRedeem","closablePKs","selectedPKs","ta","sendTransaction","txid","instrCnt","confirmTransaction","res","err","toString","msg","trace","TSC","Container","maxWidth","marginTop","position","src","alt","Paper","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","borderRadius","textAlign","connected","fontSize","minHeight","DataGrid","sx","border","autoHeight","rows","columns","checkboxSelection","onSelectionModelChange","cursor","Snackbar","autoHideDuration","onClose","Alert","theme","createTheme","palette","type","network","process","rpcHost","frcntProgramID","frcntAccount","Connection","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06fdf5a0.chunk.js","sourcesContent":["\r\nimport * as sweb3 from '@solana/web3.js';\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { EmptyAccount } from './fee-redeemer';\r\nimport { GridSelectionModel } from '@mui/x-data-grid';\r\n\r\n\r\nexport interface EmptyAccountInfo {\r\n    id: number,\r\n    account: EmptyAccount,\r\n    lamports: number,\r\n    metadata?: sweb3.PublicKey,\r\n    image?: string,\r\n    name?: string\r\n  }\r\n\r\nexport async function getEmptyAccountInfos(connection: sweb3.Connection, accounts: EmptyAccount[], callback?: any) : Promise<EmptyAccountInfo[]> {\r\n    const accList = accounts.map((acc , i) => {\r\n        const adr =acc.publicKey.toBase58();\r\n         return {account: acc, \r\n            id: i, \r\n            link:getSolscanLink(adr),\r\n            lamports: acc.lamports\r\n    }});\r\n\r\n    //accList.forEach(element => populateMetadataInfo(connection, element));\r\n    populateAll(connection, accList, callback);\r\n\r\n    return accList;\r\n}\r\n\r\nasync function populateAll(connection: sweb3.Connection, accounts: EmptyAccountInfo[], callback?:any) {\r\n    for(const acc of accounts){\r\n        await populateMetadataInfo(connection, acc);\r\n    }\r\n    callback(accounts);\r\n}\r\n\r\nexport function getSolscanLink(address: string) : string {\r\n    return \"https://solscan.io/address/\"+address;\r\n}\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n  );\r\n\r\nasync function getMetadataAccount(mint: anchor.web3.PublicKey): Promise<anchor.web3.PublicKey> {\r\n    return (\r\n      await anchor.web3.PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID,\r\n      )\r\n    )[0];\r\n  };\r\n\r\nasync function populateMetadataInfo(connection: sweb3.Connection, accountInfo: EmptyAccountInfo) {\r\n    const metadataAccount = await getMetadataAccount(accountInfo.account.mint);\r\n    accountInfo.metadata = metadataAccount;\r\n    accountInfo.name = await getNFTName(connection, metadataAccount);\r\n    console.log(metadataAccount.toBase58()+ \" \"+ accountInfo.name);\r\n}\r\n\r\nasync function getNFTName(connection: sweb3.Connection, metadataAccount: sweb3.PublicKey) : Promise<string | undefined>{\r\n    const metadataAccountInfo = await connection.getAccountInfo(metadataAccount);\r\n\r\n    if(metadataAccountInfo){\r\n        const nameBuffer = metadataAccountInfo.data.slice(1+32+32+4, 1+32+32+4+32);\r\n        \r\n        const nameLenght = metadataAccountInfo.data.readUInt32LE(1+32+32);\r\n        let name = \"\";\r\n        for (let j = 0; j< nameLenght; j++){\r\n            if (nameBuffer.readUInt8(j)===0) break;\r\n            name += String.fromCharCode(nameBuffer.readUInt8(j));\r\n        }\r\n        return name;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n\r\n\r\nexport function getSelectedPKsToClose(emptyAccountsInfos: EmptyAccountInfo[], selectionModel?: GridSelectionModel): sweb3.PublicKey[] {\r\n    return emptyAccountsInfos.filter(eai => selectionModel?selectionModel.includes(eai.id):true)\r\n    .map(eai=>eai.account.publicKey);\r\n}\r\n","\r\n//import sweb3 = require('@solana/web3.js');\r\nimport * as sweb3 from '@solana/web3.js';\r\nimport * as anchor from \"@project-serum/anchor\";\r\n//import base58 = require('bs58');\r\n//import base58 from 'bs58';\r\n//import splToken = require('@solana/spl-token');\r\nimport * as splToken from '@solana/spl-token'\r\n\r\nexport const RENT_PER_TOKEN_ACCOUNT_IN_SOL = 0.00203928;\r\nexport const MAX_CLOSE_INSTRUCTIONS = 15;\r\n\r\nexport interface EmptyAccount {\r\n    publicKey: sweb3.PublicKey;\r\n    lamports: number;\r\n    mint: sweb3.PublicKey;\r\n}\r\n\r\nexport interface TotalRedemptions {\r\n    totalCloses: number;\r\n    totalSolRedeemed: number;\r\n}\r\n\r\nexport function solForEmptyAccounts(emptyAccounts: EmptyAccount[]) : number {\r\n    return emptyAccounts.map(eA => eA.lamports)\r\n        .reduce((prev, curr)=> {return prev + curr;}, 0) / sweb3.LAMPORTS_PER_SOL;\r\n}\r\n\r\nexport function getPKsToClose(emptyAccounts: EmptyAccount[]): sweb3.PublicKey[] {\r\n    return emptyAccounts.map(eA => eA.publicKey);\r\n}\r\n\r\n\r\nexport async function getTotalRedemptions(connection: sweb3.Connection, account: sweb3.PublicKey) : Promise<TotalRedemptions|null> {\r\n    const buffer = await connection.getAccountInfo(account);\r\n    if(!buffer || !buffer.data){\r\n        console.log(\"Could not get account info for \"+account.toBase58());\r\n        return null;\r\n    }\r\n    const closedAccounts = buffer.data.readInt32LE(8)\r\n    return {\r\n        totalCloses: closedAccounts,\r\n        totalSolRedeemed: RENT_PER_TOKEN_ACCOUNT_IN_SOL * closedAccounts\r\n    }\r\n}\r\n\r\n\r\nexport async function findEmptyTokenAccounts(connection: sweb3.Connection, owner: sweb3.PublicKey) : Promise<EmptyAccount[]> {\r\n    const response = await connection.getTokenAccountsByOwner(owner,{programId: splToken.TOKEN_PROGRAM_ID});\r\n    //console.log(response);\r\n    const emptyAccounts: EmptyAccount[] = [];\r\n    for (let account of response.value){\r\n        //console.log(account.pubkey.toBase58());\r\n        let isEmpty = false;\r\n        const offsetInBytes = 8*8;\r\n        if(account.account.data.readBigUInt64LE){\r\n            const amount = account.account.data.readBigUInt64LE(offsetInBytes);\r\n            //console.log(\"amount: \"+amount);\r\n            isEmpty = amount === 0n;\r\n        } else {\r\n            // readBigUInt64LE not available in older versions\r\n            isEmpty = true;\r\n            for (let i = 0; i<8; i++){\r\n                if(account.account.data[offsetInBytes+i]!==0){\r\n                    isEmpty = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if(isEmpty){\r\n            //console.log(\"found empty account: \"+account.pubkey.toBase58());\r\n            const mint = new sweb3.PublicKey(account.account.data.slice(0, 32));\r\n            const eA : EmptyAccount = {\r\n                publicKey: account.pubkey,\r\n                lamports: account.account.lamports,\r\n                mint: mint\r\n            };\r\n            emptyAccounts.push(eA);\r\n        }\r\n    }\r\n    return emptyAccounts;\r\n\r\n}\r\n\r\nexport async function createCloseEmptyAccountsTransactions(owner: sweb3.PublicKey, \r\n    accountPKs: sweb3.PublicKey[], cntAccount?: sweb3.PublicKey, program?: anchor.Program, \r\n    donationPercentage?: number, donationAddress?: sweb3.PublicKey): Promise<sweb3.Transaction[]> {\r\n\r\n    const closeInstructions = accountPKs.map(accPK => splToken.Token.createCloseAccountInstruction(\r\n        splToken.TOKEN_PROGRAM_ID,\r\n        accPK,\r\n        owner,\r\n        owner,\r\n        []\r\n    ));\r\n\r\n    let transactions: sweb3.Transaction[] = [];\r\n    \r\n    while(closeInstructions.length>0){\r\n        const transaction = new sweb3.Transaction();\r\n\r\n        // add close instructions\r\n        for (let i = 0; i < MAX_CLOSE_INSTRUCTIONS; i++) {\r\n            const nextInstr = closeInstructions.pop();\r\n            if(nextInstr){\r\n                transaction.add(nextInstr);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // add donation instruction\r\n        if(donationPercentage && donationAddress){\r\n            const closeInstrCnt = transaction.instructions.length;\r\n            const donationAmount = RENT_PER_TOKEN_ACCOUNT_IN_SOL * closeInstrCnt * donationPercentage/100;\r\n            const donationInstruction = sweb3.SystemProgram.transfer({\r\n                fromPubkey: owner,\r\n                toPubkey: donationAddress,\r\n                lamports: sweb3.LAMPORTS_PER_SOL * donationAmount,\r\n            });\r\n            transaction.add(donationInstruction);\r\n        }\r\n\r\n        // add counter program instruction\r\n        if(cntAccount && program){\r\n            //console.log(\"Program is here! \"+program);\r\n            const cntInstruction = program.instruction.count(\r\n                {\r\n                accounts:\r\n                {\r\n                  feecntrAccount: cntAccount,\r\n                  instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n        \r\n                }\r\n              });\r\n              //console.log(\"instruction created! \");\r\n            transaction.add(cntInstruction);\r\n        }\r\n\r\n        transactions.push(transaction);\r\n    }\r\n    return transactions;\r\n}\r\n","\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { EmptyAccount, MAX_CLOSE_INSTRUCTIONS, TotalRedemptions, solForEmptyAccounts } from './fee-redeemer';\r\n\r\ntype HeaderProps = {\r\n  emptyAccounts?: EmptyAccount[];\r\n  totalRedemptions?: TotalRedemptions;\r\n};\r\n\r\nexport const Header = ({ emptyAccounts, totalRedemptions }: HeaderProps) => {\r\n  const txcnt = emptyAccounts?Math.ceil(emptyAccounts?.length / MAX_CLOSE_INSTRUCTIONS):0;\r\n  return (\r\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\r\n      <Grid container direction=\"row\" wrap=\"nowrap\">\r\n        {emptyAccounts && (\r\n          <Grid container direction=\"row\" wrap=\"nowrap\">\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Empty Token Accounts:\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: 'bold',\r\n                }}\r\n              >\r\n                {`${emptyAccounts?.length}`}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                SOL available:\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: 'bold' }}\r\n              >\r\n                {getPriceString(solForEmptyAccounts(emptyAccounts))}\r\n              </Typography>\r\n              {emptyAccounts?.length > 0 && \r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  done in {`${txcnt}`} transaction/s.{txcnt !== 1 && 's'}\r\n                </Typography> \r\n              }\r\n            </Grid>\r\n            {/* <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Total Redemmed\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: 'bold',\r\n                }}\r\n              >\r\n                {totalRedemptions && getPriceString(totalRedemptions?.totalSolRedeemed)}\r\n              </Typography>\r\n            </Grid> */}\r\n          </Grid>\r\n        )}\r\n        \r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst getPriceString = (price: number): string => {\r\n  return `◎ ${price.toFixed(3)}`;\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { EmptyAccount } from './fee-redeemer';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 40px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: #ff5900;\r\n  color: white;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  border-radius: 0px;\r\n`; // add your own styles here\r\n\r\nexport const RedeemButton = ({\r\n  onClick,\r\n  emptyAccounts\r\n}: {\r\n  onClick: () => Promise<void>;\r\n  emptyAccounts?: EmptyAccount[];\r\n}) => {\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n\r\n  const getRedeemButtonContent = () => {\r\n    if (clicked) {\r\n      return <CircularProgress />;\r\n    } else if (emptyAccounts?.length===0) {\r\n      return 'ZERO TOKEN ACCOUNT TO CLEANUP';\r\n    }\r\n\r\n    return 'GET ME MY SOL';\r\n  };\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={\r\n        clicked ||\r\n        emptyAccounts?.length===0\r\n      }\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        await onClick();\r\n        setClicked(false);\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getRedeemButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Container, Paper, Snackbar } from \"@material-ui/core\";\r\nimport styled from 'styled-components';\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Slider from '@mui/material/Slider';\r\nimport Stack from '@mui/material/Stack';\r\nimport { DataGrid, GridColDef, GridSelectionModel } from '@mui/x-data-grid';\r\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\r\n\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\n// import { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport { getEmptyAccountInfos, EmptyAccountInfo, getSolscanLink, getSelectedPKsToClose } from \"./utils\"\r\nimport { EmptyAccount, TotalRedemptions, findEmptyTokenAccounts, createCloseEmptyAccountsTransactions, getTotalRedemptions, getPKsToClose} from \"./fee-redeemer\";\r\nimport { Header } from \"./Header\";\r\nimport { RedeemButton } from \"./RedeemButton\";\r\nimport Link from \"@mui/material/Link\";\r\n\r\nexport interface RedeemerProps {\r\n  connection: anchor.web3.Connection;\r\n  rpcHost: string;\r\n  frcntrProgramId: anchor.web3.PublicKey;\r\n  frcntrAccount: anchor.web3.PublicKey;\r\n  donationAddress: anchor.web3.PublicKey;\r\n}\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\nwidth: 100%;\r\nheight: 40px;\r\nmargin-top: 10px;\r\nmargin-bottom: 5px;\r\nbackground: #ff5900;\r\ncolor: white;\r\nfont-size: 12px;\r\nfont-weight: bold;\r\nborder-radius: 0px;\r\n`;\r\n\r\nconst MainContainer = styled.div``; // add your owns styles here\r\n\r\nconst emptyAccountsColumns: GridColDef[] = [\r\n  { field: 'id', headerName: 'ID', width: 40} ,\r\n  { field: 'account', headerName: 'ADDRESS', width: 400,\r\n  renderCell: (cellValues) => {\r\n    const adr = cellValues.row.account.publicKey.toBase58();\r\n    return <Link href={getSolscanLink(adr)} target=\"_blank\">{adr}</Link>;\r\n  } },\r\n  { field: 'lamports', headerName: 'LAMPORTS', width: 100} ,\r\n  { field: 'mint', headerName: 'MINT ADDRESS', width: 400,\r\n  renderCell: (cellValues) => {\r\n    const adr = cellValues.row.account.mint.toBase58();\r\n    return <Link href={getSolscanLink(adr)} target=\"_blank\">{adr}</Link>;\r\n  } },\r\n  { field: 'name', headerName: 'NAME', width: 200} ,\r\n  //   valueGetter: (params: GridValueGetterParams) =>\r\n  //     `${params.row.firstName || ''} ${params.row.lastName || ''}`,\r\n  // },\r\n  \r\n  \r\n];\r\n\r\n\r\nconst Redeemer = (props: RedeemerProps) => {\r\n  const connection = props.connection;\r\n  //const [balance, setBalance] = useState<number>();\r\n  const [emptyAccounts, setEmptyAccounts] = useState<EmptyAccount[]>();\r\n  const [totalRedemptions, setTotalRedemptions] = useState<TotalRedemptions>();\r\n  const [emptyAccountInfos, setEmptyAccountInfos] = useState<EmptyAccountInfo[]>();\r\n  const [showTable, setShowTable] = useState<boolean>(false);\r\n  //const [isInTransaction, setIsInTransaction] = useState(false); \r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [selectionModel, setSelectionModel] = useState<GridSelectionModel>();\r\n  const [donationPercentage, setDonationPercentage] = useState<number>(0);\r\n\r\n  const handleDonationChange = (event: Event, newValue: number | number[]) => {\r\n    setDonationPercentage(newValue as number);\r\n  };\r\n\r\n  //const w2 = useWallet();\r\n  //const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = {\r\n    publicKey: wallet.publicKey,\r\n    signAllTransactions: wallet.signAllTransactions,\r\n    signTransaction: wallet.signTransaction,\r\n  } as anchor.Wallet;\r\n\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n  \r\n  const idl = require(\"./frcnt_IDL.json\");\r\n  const program = new anchor.Program(idl, props.frcntrProgramId, provider);\r\n\r\n\r\n\r\n  const loadEmptyAccounts = () => {\r\n    (async () => {\r\n      if (!wallet || !wallet.publicKey) return;\r\n      //console.log(\"Finding empty token accounts\");\r\n      const updatedEA = await findEmptyTokenAccounts(connection,wallet.publicKey);\r\n      //console.log(\"Found  \"+updatedEA.size);\r\n\r\n      setEmptyAccounts(updatedEA);\r\n      \r\n      const totalInfo = await getTotalRedemptions(connection,props.frcntrAccount);\r\n\r\n      if(totalInfo){\r\n        setTotalRedemptions(totalInfo);\r\n      }\r\n\r\n      \r\n    })();\r\n  };\r\n\r\n  const enableTable = async () => {\r\n    if(!emptyAccounts) return;\r\n    setShowTable(true);\r\n\r\n    const updateStateCallback = (data : EmptyAccountInfo[]) => {\r\n      setEmptyAccountInfos(undefined);setEmptyAccountInfos(data);}\r\n      const eaInfos = await getEmptyAccountInfos(connection, emptyAccounts, updateStateCallback);\r\n      if (eaInfos) {\r\n        setEmptyAccountInfos(eaInfos);\r\n        const allIDs : number[] = eaInfos.map(ea=>ea.id);\r\n        setSelectionModel(allIDs); // select all\r\n      }\r\n\r\n  }\r\n\r\n  useEffect(loadEmptyAccounts, [\r\n    wallet,\r\n    connection,\r\n    props.frcntrAccount\r\n  ]);\r\n\r\n  // useEffect(() => {\r\n  //   (async () => {\r\n  //     if (wallet && wallet.publicKey) {\r\n  //       const balance = await connection.getBalance(wallet.publicKey);\r\n  //       setBalance(balance / LAMPORTS_PER_SOL);\r\n  //     }\r\n  //   })();\r\n  // }, [wallet, connection]);\r\n\r\n  const onRedeem = async () => {\r\n    try {\r\n      //setIsInTransaction(true);\r\n      if (wallet && wallet.publicKey && emptyAccounts && emptyAccounts.length>0) {\r\n\r\n        const closablePKs = getPKsToClose(emptyAccounts);\r\n        let selectedPKs = closablePKs;\r\n        if(selectionModel && emptyAccountInfos){\r\n          console.log(selectionModel.length+ \" selected token accounts.\");\r\n          selectedPKs = getSelectedPKsToClose(emptyAccountInfos, selectionModel);\r\n          //console.log(selectedPKs.length+ \" accounts in queue.\");\r\n        }\r\n\r\n        const transactions = await createCloseEmptyAccountsTransactions(wallet.publicKey, selectedPKs, props.frcntrAccount, program, donationPercentage, props.donationAddress);\r\n        for (const ta of transactions){\r\n          const txid = await wallet.sendTransaction(ta,connection);\r\n          console.log(txid);\r\n          const instrCnt = ta.instructions.length;\r\n          console.log(\"Closing accounts (\"+ instrCnt + \" instructions)\");\r\n\r\n          const res = await connection.confirmTransaction(txid, 'confirmed');\r\n          if(!res.value.err){\r\n            setAlertState({\r\n              open: true,\r\n              message: \"SOL credited. Token Account cleaup done.\",\r\n              severity: \"success\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: res.value.err.toString(),\r\n              severity: \"warning\",\r\n            });\r\n          }\r\n        }\r\n\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Process Unsuccessful. Try again.\";\r\n      console.trace();\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      // if (wallet && wallet.publicKey) {\r\n      //   const balance = await props.connection.getBalance(wallet.publicKey);\r\n      //   setBalance(balance / LAMPORTS_PER_SOL);\r\n      // }\r\n      //setIsInTransaction(false);\r\n      //loadEmptyAccounts();\r\n    }\r\n  }\r\n\r\n\r\n  const TSC = styled(\"img\")`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  object-position: center;\r\n  margin-bottom: 0px;\r\n  margin-right: 20px;\r\n  border-radius: 5%;\r\n    \r\n`\r\nconst TSC2 = styled(\"img\")`\r\nwidth: 100%;\r\nheight: 40%;\r\nobject-fit: cover;\r\nobject-position: center;\r\nmargin-bottom: 20px;\r\nmargin-right: 0px;\r\nborder-radius: 2%;\r\n  \r\n`\r\n\r\n\r\n  return (\r\n    \r\n    <Container maxWidth=\"md\" style={{ marginTop: 10 }}>\r\n\r\n      <Container maxWidth=\"sm\" style={{ position: 'relative' }}>\r\n           \r\n      <a href=\"https://www.theshadyclass.xyz/\" target=\"_blank\">\r\n      <TSC src=\"https://raw.githubusercontent.com/flipthetip/test-tsc/main/ARC%201%20-%20THE%20DARKNESS%20(4).png\" \r\n          alt=\"THESHADYCLASS\"  />              \r\n          </a>\r\n        <Paper\r\n          style={{ paddingTop: 5, paddingBottom: 20, paddingLeft: 20, paddingRight: 20, backgroundColor: '#292524', borderRadius: 6, textAlign: 'center' }}\r\n        >\r\n          \r\n          <h4>WALLET MANAGER<br/>Claim un-used on-chain SOL</h4>\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              <Header emptyAccounts={emptyAccounts} totalRedemptions={totalRedemptions} />\r\n              <MainContainer>\r\n                {/* <Stack spacing={2} direction=\"row\" alignItems=\"center\">\r\n                <p>Donate:</p>\r\n                <Slider aria-label=\"Donation Percentage\" defaultValue={0} step={0} min={0} max={100} onChange={handleDonationChange} color=\"secondary\"/>\r\n                <p>{donationPercentage}%</p>\r\n                </Stack> */}\r\n                  <RedeemButton\r\n                    emptyAccounts={emptyAccounts}\r\n                    onClick={onRedeem}\r\n                  />\r\n              </MainContainer>\r\n            </>\r\n          )}\r\n          <p style={{ color: \"white\", textAlign: 'center', fontSize: '14px', fontWeight: 'bold'  }}>Connect your wallet to check your Claimable SOL | 👻</p>\r\n          </Paper>\r\n          <br/>\r\n          <br/>\r\n\r\n\r\n          <a href=\"https://twitter.com/theshadyclass\">\r\n          <p style={{ color: \"white\", textAlign: 'center', fontSize: '20px', fontWeight: 'bold' }}>📮 TWITTER</p></a>\r\n          <p style={{ color: \"white\", textAlign: 'center', fontSize: '16px' }}>Follow us on Twitter | 👻 @theshadyclass</p>\r\n          <a href=\"https://discord.gg/7SrNbVyHDD\">\r\n          <p style={{ color: \"white\", textAlign: 'center', fontSize: '20px', fontWeight: 'bold' }}>🤖 DISCORD</p></a> \r\n          <p style={{ color: \"white\", textAlign: 'center', fontSize: '16px' }}>Join us in Discord</p>\r\n          <br/>\r\n          <br/>\r\n          <p style={{ color: \"white\", textAlign: 'center', fontSize: '12px', fontWeight: 'bold'}}>CONNECT WALLET ▶ DAPP CHECKS FOR EMPTY TOKEN ACCOUNTS ▶ SHOWS CLAIMABLE SOL ▶ HAPPINESS </p>\r\n          <p style={{ color: \"cyan\", textAlign: 'center', fontSize: '12px'}}>The process is like finding money while doing your laundry. 💦</p>\r\n\r\n          <br/>\r\n\r\n          {/* <h4 style={{ color: \"white\", textAlign: 'center', fontWeight: 'bold'}}>THE SHADY CLASS - LAUNCHPAD X WEB3 TOOLS - Est. 2022 <br/> Launch your project with us! - Coming soon</h4> */}\r\n          <Paper\r\n          style={{ paddingLeft: 20, paddingRight: 20, paddingTop: 5, paddingBottom:5, backgroundColor: '#000000', borderRadius: 6, textAlign: 'center', minHeight:'auto' }}\r\n          >\r\n          \r\n          <p style={{ color: \"white\", textAlign: 'left', fontWeight: 'bold'}}>FAQ</p>\r\n          <p style={{ color: \"white\", textAlign: 'left', fontSize: '12px', fontWeight: 'bold'}}>WHAT DOES THIS DAPP DO?</p>\r\n          <p style={{ color: \"orange\", textAlign: 'left', fontSize: '12px' }}>It closes unused/old token accounts in your wallet.</p>\r\n          <p style={{ color: \"white\", textAlign: 'left', fontSize: '12px', fontWeight: 'bold'}}>WHY DO I HAVE THOSE TOKEN ACCOUNTS?</p>\r\n          <p style={{ color: \"orange\", textAlign: 'left', fontSize: '12px'}}>When you mint/get a new NFT/token to your wallet, a \"Token account\" is created and SOL fees are deducted from you.\r\n          <br/><br/>However, when that NFT/token leaves your wallet by sending it to others or by burning, the Token Account is left open and the fees are just there as on-chain rent.<br/><br/> THIS DAPP RECLAIMS ALL ON-CHAIN RENT SOL BACK TO YOUR ACCOUNT.</p>\r\n          <p style={{ color: \"white\", textAlign: 'left', fontSize: '12px', fontWeight: 'bold'}}>WHAT ARE THE USE-CASES FOR THIS?</p>\r\n          <p style={{ color: \"orange\", textAlign: 'left', fontSize: '12px'}}>You should use this dapp if you have:<br/>\r\n          <br/>↪ Burned a NFT before. Possibly a rug project. Fuck em ruggers. Or you did it for a project's utility.\r\n          <br/>↪ Got an WL token from a project before but is done using it.\r\n          <br/>↪ Got solana tokens from projects that you no longer have in your wallet anymore.\r\n          <br/>↪ Sent a NFT to someone else and don't have/dont plan to have that NFT anymore.\r\n          <br/>↪ And other similar scenarios from the above mentioned ones.\r\n          </p>\r\n          <br/>\r\n          {/* <p style={{ color: \"gray\"}}>follow me on <a href=\"https://twitter.com/HeyAndyS\">Twitter</a> and <a href=\"https://www.youtube.com/channel/UCURIDSvXkuDf9XXe0wYnoRg\">YouTube</a></p> */}\r\n        </Paper>\r\n      </Container>\r\n      {!showTable ? <p onClick={enableTable} style={{ color: \"white\", textAlign: \"center\", cursor: \"pointer\"}}>Activity Log</p> : \r\n      emptyAccountInfos && emptyAccountInfos.length>0 ?\r\n      <div style={{ width: '100%', textAlign: \"center\" }}>\r\n          <DataGrid sx={{\r\n              color: \"none\",\r\n              border: 2,\r\n            }}\r\n            autoHeight\r\n            rows={emptyAccountInfos}\r\n            columns={emptyAccountsColumns}\r\n            checkboxSelection\r\n            selectionModel={selectionModel}\r\n            onSelectionModelChange={setSelectionModel}\r\n          />\r\n      </div>\r\n      :<p>Zero Token Account to cleanup.</p>}\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n      <h2 style={{ color: \"white\", textAlign: 'center', fontSize: '12px', fontWeight: 'bold', backgroundColor: '#000000', paddingLeft: 10, borderRadius: 6, maxWidth: 'xs' }}>          \r\n        Coded in the Shadows | 👻 The Shady Class Buidl</h2>\r\n\r\n    </Container>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nexport default Redeemer;\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\nimport Redeemer from './Redeemer';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst frcntProgramID = new anchor.web3.PublicKey(process.env.REACT_APP_COUNTER_PROGRAM_ID!);\r\nconst frcntAccount = new anchor.web3.PublicKey(process.env.REACT_APP_COUNTER_PROGRAM_ACCOUNT!);\r\nconst donationAddress = new anchor.web3.PublicKey(process.env.REACT_APP_DONATION_ADDRESS!);\r\nconst connection = new anchor.web3.Connection(rpcHost\r\n  ? rpcHost\r\n  : anchor.web3.clusterApiUrl('mainnet-beta'));\r\n\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Redeemer\r\n              connection={connection}\r\n              rpcHost={rpcHost}\r\n              frcntrProgramId={frcntProgramID}\r\n              frcntrAccount={frcntAccount}\r\n              donationAddress={donationAddress}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}